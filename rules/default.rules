var Number luminanceThreshold = 180
var Number lowBatteryThreshold = 100

rule "Ceiling_Light ON"
when
    Item Ceiling_Sensor_Motion changed from OFF to ON or
    Item Door_Sensor_Contact changed from CLOSED to OPEN 
then
    if(Ceiling_Sensor_Luminance.state < luminanceThreshold){
        Ceiling_Light.sendCommand(ON)
        logInfo("Ceiling_Light.ON", "Ceiling_Light open")
    }else{
        logInfo("Ceiling_Light.ON", "Rule has run but Luminance is high: " + Ceiling_Sensor_Luminance.state + " is higher than " + luminanceThreshold)
    }


    logWarn("Door_Sensor_Battery.LOW", "CHECK Door_Sensor_Battery is at " + Door_Sensor_Battery.state)
    logInfo("Door_Sensor_Battery.LOW", "CHECK Door_Sensor_Battery is at " + Door_Sensor_Battery.state)
    

    if((Door_Sensor_Battery.state as Number) < lowBatteryThreshold){
        logWarn("Door_Sensor_Battery.LOW", "Door_Sensor_Battery is at " + Door_Sensor_Battery.state)
    }
    if((Ceiling_Sensor_Battery.state as Number) < lowBatteryThreshold){
        logWarn("Ceiling_Sensor_Battery.LOW", "Ceiling_Sensor_Battery is at " + Ceiling_Sensor_Battery.state)
    }
end

rule "Ceiling_Light OFF"
when
    Item Door_Sensor_Contact changed from OPEN to CLOSED
then
    logInfo("Ceiling_Light.OFF", "Ceiling_Light closed")
    Ceiling_Light.sendCommand(OFF)


    logWarn("Door_Sensor_Battery.LOW", "CHECK Door_Sensor_Battery is at " + Door_Sensor_Battery.state)
    logInfo("Door_Sensor_Battery.LOW", "CHECK Door_Sensor_Battery is at " + Door_Sensor_Battery.state)
    

    if(Door_Sensor_Battery.state as Number < lowBatteryThreshold){
        logWarn("Door_Sensor_Battery.LOW", "Door_Sensor_Battery is at " + Door_Sensor_Battery.state)
    }
    if(Ceiling_Sensor_Battery.state as Number < lowBatteryThreshold){
        logWarn("Ceiling_Sensor_Battery.LOW", "Ceiling_Sensor_Battery is at " + Ceiling_Sensor_Battery.state)
    }
end


// rule "Battery Monitor"
// when
//     Time cron "0 0 0 0 0 ?"
// then
//     if (Ceiling_Sensor_Battery.state as Number <= lowBatteryThreshold) {
//         val String report = Batteries.allMembers.filter( [ (state as Number) <= (lowBatteryThreshold) ] ).sortBy( [ state as Number ] ).map[ name + ": " + state.toString ].join("\n")
//         val message = "Battery levels:\n\n" + report + "\n\nRegards,\n\nOur House"
//         logWarn("Ceiling_Sensor_Battery.LOW", "Ceiling_Sensor_Battery is LOW ")
//     }
// end





// rule "Door_Sensor_Battery LOW"
// when
//     Item Door_Sensor_Battery updated 
// then
//     logInfo("Door_Sensor_Battery.BATTERYCHECK")
//     if(Door_Sensor_Battery.state<20){
//         logInfo("Door_Sensor_Battery.LOW: Door_Sensor_Battery is low")
//     }
// end


// rule "Ceiling_Sensor_Battery LOW"
// when
//     Item Ceiling_Sensor_Battery updated 
// then
//     logInfo("RULE.RUNNING.BATTERYCHECK")
//     if(Ceiling_Sensor_Battery.state<20){
//         logInfo("RULE.RUNNING.BATTERYCHECK: Door_Sensor_Battery is low")
//     }
// end